# -*- coding: utf-8 -*-
"""VLF_copy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Rogerio-mack/VLF/blob/main/VLF_copy.ipynb

# installs
"""

"""# imports"""

import os
import sys
import numpy as np
import pandas as pd
import shutil
# from google.colab import drive

import json
import datetime 
import time
from IPython.display import display

# Narrowband Files
#-------------------------------------------------------------------------------
# Filename: XXYYMMDDHHMMSSZZZ_ACCT.mat

# XX – Station ID
# YY – Year
# MM — Month
# DD — Day
# HH — Hour
# MM — Minute
# SS — Second
# ZZZ — Transmitter Callsign
# A — Usually not used
# CC — 00 for N/S channel, 01 for E/W channel
# T — Type of data
# A is low resolution (1 Hz sampling rate) amplitude
# B is low resolution (1 Hz sampling rate) phase
# C is high resolution (50 Hz sampling rate) amplitude
# D is high resolution (50 Hz sampling rate) phase
# F is high resolution (50 Hz sampling rate) effective group delay

# XXYYMMDDHHMMSSZZZ_ACCT.mat
# 01234567890123456789012345

# Braoadband Files
#-------------------------------------------------------------------------------
# Filename: XXYYMMDDHHMMSS_ACC.mat

# XX – Station ID
# YY – Year
# MM — Month
# DD — Day
# HH — Hour
# MM — Minute
# SS — Second
# A — Sampling rate. 0 for 100 kHz sampled data (VLF), 1 for 1 MHz sampled data (LF), 2 for 25 kHz sampled data (Siple station experiment).
# CC — 00 for N/S channel, 01 for E/W channel

# XXYYMMDDHHMMSS_ACC.mat
# 0123456789012345678901 


def awesome_conventions():
    name_conventions = {
        
    'narrowband' : {    
      'Station_ID':       [0,1],
      'Year':             [2,3],
      'Month':            [4,5],
      'Day':              [6,7],
      'Hour':             [8,9],
      'Minute':           [10,11],
      'Second':           [12,13],
      'Transmitter':      [14,16],
      '_':                [17,17],
      'Usually not used': [18,18],
      'CC':               [19,20],
      # CC — 00 for N/S channel, 01 for E/W channel
      'Type_ABCDF':       [21,21],
      # A is low resolution (1 Hz sampling rate) amplitude
      # B is low resolution (1 Hz sampling rate) phase
      # C is high resolution (50 Hz sampling rate) amplitude
      # D is high resolution (50 Hz sampling rate) phase
      # F is high resolution (50 Hz sampling rate) effective group delay
      '.mat':             [22,25]
      },
    
    'broadband' : { 
      'Station_ID':       [0,1],
      'Year':             [2,3],
      'Month':            [4,5],
      'Day':              [6,7],
      'Hour':             [8,9],
      'Minute':           [10,11],
      'Second':           [12,13],
      '_':                [14,14],
      'A':                [15,15],
      # A — Sampling rate. 0 for 100 kHz sampled data (VLF), 1 for 1 MHz sampled data (LF), 2 for 25 kHz sampled data (Siple station experiment). 
      'CC':               [16,17],
      # CC — 00 for N/S channel, 01 for E/W channel
      '.mat':             [18,21]
      }  
    
    }
        
    f = open("name_conventions.json", "w")
    f.write(json.dumps(name_conventions))
    f.close()
    
    with open("name_conventions.json") as json_file:
      name_conventions = json.load(json_file)
    
#    print(name_conventions)
#    print(name_conventions['narrowband'])
    
    with open("name_conventions.json") as json_file:
        name_conventions = json.load(json_file)
  
    return name_conventions

"""# `get_from_name()`"""

def get_from_name(fname, field, type_band='narrowband'):
  
  global name_conventions  
  return fname[ int(name_conventions[type_band][field][0]) : int(name_conventions[type_band][field][1]) + 1 ]


"""# `what_type()`"""

def what_type(path, fname):
# narrowband 
# XXYYMMDDHHMMSSZZZ_ACCT.mat
# 01234567890123456789012345

# broadband
# XXYYMMDDHHMMSS_ACC.mat
# 0123456789012345678901 
  global name_conventions 

  if fname.split('.')[-1] != 'mat': return None
  if fname.count('_') != 1: return None
  if fname.count('.') != 1: return None

  try:
    datetime.datetime(int('20' + get_from_name(fname,'Year')),
                      int(get_from_name(fname,'Month')),
                      int(get_from_name(fname,'Day')),
                      int(get_from_name(fname,'Hour')),
                      int(get_from_name(fname,'Minute')),
                      int(get_from_name(fname,'Second')))
  except:
    return None

  for type_band in ['narrowband','broadband']:
    if (fname.find('_') ==  name_conventions[type_band]['_'][0]) and (fname.find('.mat') ==  name_conventions[type_band]['.mat'][0]):
      return type_band  

  return None


"""# `sample_waldo()` (generate sample)"""


"""# `create_df_files()`"""

def create_df_files(root):

  import pandas as pd 

  paths = []
  fnames = []
  type_bands = []
  full_names = []

  for path, subdirs, files in os.walk(root):
      for fname in files:
          paths.append(path)
          fnames.append(fname)
          full_names.append(os.path.join(path, fname))
          type_bands.append(str(what_type(path,fname)))

  df_files = pd.DataFrame()
  df_files['path'] = paths
  df_files['fname'] = fnames
  df_files['full_name'] = full_names
  df_files['type_band'] = type_bands
  df_files['copied'] = False
  df_files['copy_date'] = np.nan
  df_files['copy_date'] = df_files['copy_date'].astype('datetime64[ns]')
  df_files['to_path'] = ' '
  
  return df_files

"""# `class file_os`"""

class file_os:
  def __init__(self, path):
    self.path = path
    self.file_type = 'os'

  def copy_file(self,file_in,file_out):
    import shutil

    shutil.copy2(file_in,file_out)
    
    return

"""# `copy_files()` e `report_summary()`"""

import shutil
import time
from tqdm.auto import tqdm

def report_summary(df_files):
  print('Total files: '.ljust(27), len(df_files))
  print('All copied: '.ljust(27), len(df_files[df_files.copied == True]))
  print('Files remained to be copy: '.ljust(27), len(df_files[ (df_files.copied == False) & (df_files.type_band != 'None')]))
  print('...narrowband: '.ljust(27), len(df_files[ (df_files.copied == False) & (df_files.type_band == 'narrowband')]))
  print('...broadband: '.ljust(27), len(df_files[ (df_files.copied == False) & (df_files.type_band == 'broadband')]))
  print('To be skipped: '.ljust(27), len(df_files[ df_files.type_band == 'None' ]))
  print('All copies...')
  print(pd.DataFrame(df_files.copy_date.value_counts()))
  return

def copy_files(df_files, root_path_out, type_path_out='os', override=False, dict_stations=None):

  pbar = tqdm(desc='Files processing', total=len(df_files))

  copy_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
  count_files = 0
  count_copied = 0

  print('\nBefore executing...')
  report_summary(df_files) 

  for ix, row in df_files.iterrows():
    pbar.update(1)

    path = row['path']
    fname = row['fname']
    full_name = row['full_name']
    type_band = row['type_band']
    count_files += 1

    if type_band == 'None': continue
    
    if type_band not in ['narrowband','broadband']:
      sys.exit('There is an inconsistent type_band in df_files.')

    if row['copied'] and not override: continue

    dir_year =  '20' + get_from_name(fname,'Year')

    dir_date =  '20' + get_from_name(fname,'Year') + '_' + \
                get_from_name(fname,'Month') + '_' + \
                get_from_name(fname,'Day')

    dir_station = get_from_name(fname,'Station_ID')

    if dict_stations is not None:
      if dir_station in dict_stations.keys():
        dir_station = dict_stations[dir_station]
        
    if not os.path.exists(root_path_out):
      os.mkdir(root_path_out)
      None # print("Directory ", path_out ," was created")
    else:    
      None # print("Warning: directory ", path_out," already exists")    

    path_out = os.path.join(root_path_out, dir_year)
    if not os.path.exists(path_out):
      os.mkdir(path_out)
      None # print("Directory ", path_out ," was created")
    else:    
      None # print("Warning: directory ", path_out," already exists")

    path_out = os.path.join(path_out, type_band)
    if not os.path.exists(path_out):
      os.mkdir(path_out)
      None # print("Directory ", path_out ," was created")
    else:    
      None # print("Warning: directory ", path_out," already exists")

    path_out = os.path.join(path_out, dir_station)
    if not os.path.exists(path_out):
      os.mkdir(path_out)
      None # print("Directory ", path_out ," was created")
    else:    
      None # print("Warning: directory ", path_out," already exists")

    path_out = os.path.join(path_out, dir_date)
    if not os.path.exists(path_out):
      os.mkdir(path_out)
      None # print("Directory ", path_out ," was created")
    else:    
      None # print("Warning: directory ", path_out," already exists")  

    if type_path_out == 'os': instance = file_os(path)

    try:
      instance.copy_file(os.path.join(path, fname), os.path.join(path_out, fname))
      count_copied += 1
    except:
      print('A error ocurred coping file ' + os.path.join(path, fname))

    df_files.at[ix,'copied'] = True
    df_files.at[ix,'copy_date'] = copy_date 
    df_files.at[ix,'to_path'] = path_out

    # time.sleep(1)
    
    if ix % (len(df_files)//100 + 1) == 0:
      print('...Copy Running ', ix / len(df_files), ' % Executed')
      df_files.to_csv(os.path.join(path,'df_files.csv'),index=None)
      df_files.to_csv(os.path.join(path_out,'df_files.csv'),index=None)
      print('...dfiles.csv saved')
      
  pbar.close()

  print('\nThis running...')
  print('copy_date: ', copy_date, 'count_files: ', count_files, 'count_copied: ', count_copied)
  
  print('\nAfter executing...')
  report_summary(df_files) 

  df_files.to_csv(os.path.join(path,'df_files.csv'),index=None)
  df_files.to_csv(os.path.join(path_out,'df_files.csv'),index=None)
      
  return copy_date, count_files, count_copied

name_conventions = awesome_conventions()

# fname = 'B1070725000500_000.mat'
# for key in name_conventions['broadband'].keys():
#   print(key,' : ', get_from_name(fname,key,'broadband'))
  
# fname = 'B1150920072500NPM_002B.mat'  
# for key in name_conventions['narrowband'].keys():
#   print(key,' : ', get_from_name(fname,key))

# root = '/media/ionodata/Seagate Expansion Drive/ROI - Data' # input
root = 'D:\\ROI - Data'
df_files = create_df_files(root)
df_files.to_csv('D:\\ROI - Data\\df_files.csv',index=None)

root_path_out = 'D:\\VLF' # output
copy_files(df_files, root_path_out, dict_stations=None)


